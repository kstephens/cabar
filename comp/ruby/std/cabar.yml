<%
  # Calls ruby to get information about itself.
  # Plugin info about ruby into a "ruby" component via eRB below.
  ruby_info = `ruby -r rbconfig -e 'puts({ :version => RUBY_VERSION, :patchlevel => (RUBY_PATCHLEVEL rescue 0), :load_path => $:, :platform => (RUBY_PLATFORM rescue Config::CONFIG["arch"] || "NO_ARCH"), :os => (Config::CONFIG["host_os"] || Config::CONFIG["build_os"] || "NO_OS") }.inspect);'`.chomp
  # $stderr.puts "$? = #{$?}"
  # $stderr.puts "ruby_info = #{ruby_info.inspect}"
  ruby_info = eval ruby_info rescue nil
  # $stderr.puts "ruby_info = #{ruby_info.inspect}"
  ruby_info ||= { }
  ruby_info[:available] = ($? == 0 && ruby_info[:version])
  ruby_info[:prog] = File.expand_path(`which ruby`.chomp)
  ruby_info[:available] &&= ! ruby_info[:prog].to_s.empty?
  ruby_info[:bin] = File.dirname(ruby_info[:prog])
  ruby_info[:system] = 
    (File.readlines("/etc/issue").first rescue "NO_SYSTEM").
    chomp.
    gsub(/\\./, '').
    gsub(/^\s+|\s+$/, '').
    gsub(/[^-a-z0-9_.]/i, '-')
  # $stderr.puts "ruby_info = #{ruby_info.inspect}"
 %>
cabar:
  version: '1.0'
  component:
    name: ruby
    version: <%= "v#{ruby_info[:version]}.#{ruby_info[:patchlevel]}".inspect %>
    description: "Ruby - <%= ruby_info[:prog] %>"
    enabled: <%= ruby_info[:available].inspect %>
    base_directory: <%= File.dirname(ruby_info[:bin]).inspect %>
    ruby: 
      :executable: <%= ruby_info[:prog].inspect %>
      :load_path:  <%= ruby_info[:load_path].inspect %>
      :platform:   <%= ruby_info[:platform].inspect %>
      :os:         <%= ruby_info[:os].inspect %>
      :system:     <%= ruby_info[:system].inspect %>
  provides:
    bin:
      abs_path: [ <%= ruby_info[:bin].inspect %> ]
      list_only: [ :ruby, :erb, :irb, :rdoc, :ri, :testrb ]
    lib/ruby:
      abs_path: <%= ruby_info[:load_path].inspect %>
      rdoc_generate: false
    lib/perl:
      enabled: false

